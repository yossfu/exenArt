{
  "rules": {
    "users": {
      "$uid": {
        ".read": "auth != null",
        ".write": "auth != null && auth.uid === $uid"
      }
    },
    "posts": {
      ".read": "auth != null",
      "$postId": {
        ".write": "auth != null && ((!data.exists() && newData.child('authorUid').val() === auth.uid) || (data.exists() && !newData.exists() && root.child('users').child(auth.uid).child('profile/isAdmin').val() === true))",
        ".validate": "!data.exists() ? newData.hasChildren(['id', 'imageUrl', 'title', 'authorUid', 'timestamp']) : true"
      }
    },
    "comments": {
      ".read": "auth != null",
      "$postId": {
        "$commentId": {
          ".write": "auth != null && (!data.exists() || (data.exists() && !newData.exists() && root.child('users').child(auth.uid).child('profile/isAdmin').val() === true))",
          "replies": {
            "$replyId": {
              ".write": "auth != null && (!data.exists() || (data.exists() && !newData.exists() && root.child('users').child(auth.uid).child('profile/isAdmin').val() === true))"
            }
          }
        }
      }
    },
    "likes": {
      "$postId": {
        ".read": "auth != null",
        "$uid": {
          ".write": "auth != null && auth.uid === $uid"
        }
      }
    },
    "views": {
      "$postId": {
        ".read": "auth != null",
        "$uid": {
          ".write": "auth != null && auth.uid === $uid"
        }
      }
    },
    "favorites": {
      "$uid": {
        ".read": "auth != null && auth.uid === $uid",
        ".write": "auth != null && auth.uid === $uid"
      }
    },
    "collections": {
      "$uid": {
        ".read": "auth != null && auth.uid === $uid",
        ".write": "auth != null && auth.uid === $uid"
      }
    },
    "collection_posts": {
      "$collectionId": {
        ".read": "auth != null",
        ".write": "auth != null && root.child('collections').child(auth.uid).child($collectionId).exists()"
      }
    },
    "following": {
      "$uid": {
        ".write": "auth != null && auth.uid === $uid"
      }
    },
    "followers": {
      "$uid": {
        "$followerUid": {
          ".write": "auth != null && auth.uid === $followerUid"
        }
      }
    },
    "notifications": {
      "$uid": {
        ".read": "auth != null && auth.uid === $uid",
        ".write": "auth != null"
      }
    }
  }
}
Explanation of Firebase RulesHereâ€™s a breakdown of the security rules I've provided:users: Allows any logged-in user to read profile data (for displaying profiles), but only lets a user write to their own profile data.posts: Any logged-in user can read all posts. A user can only create a new post and set themselves as the author. Only a user with the isAdmin: true flag in their profile can delete a post.comments: Similar to posts, any logged-in user can create a comment or reply, but only an admin can delete them.likes, views, favorites, collections: These rules ensure that users can only modify their own data. For example, you can only add a post to your own favorites, not someone else's.collection_posts: This is a key rule for the new feature. It allows a user to add a post to a collection only if they are the owner of that collection. It checks for the existence of the collection under the current user's ID.following / followers: A user can only modify their own list of people they are following.notifications: A user can only read their own notifications. The write rule is currently open to any logged-in user to allow the admin (and potentially other features in the future) to send notifications. In a production environment, this would ideally be handled by a secure server or Cloud Function.You can copy the JSON content from the document above and paste it into the "Rules" tab of your Firebase Realtime Database console. Let me know if you have any other questions!